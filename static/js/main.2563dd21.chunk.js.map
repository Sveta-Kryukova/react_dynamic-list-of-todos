{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","memo","todos","selectTodoId","selectTodo","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","query","onSearchQueryChange","selector","onSelectorChange","onDeleteButtonClick","value","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","onClickCloseTodoModal","useState","user","setUser","isUserLoading","setIsUserLoading","useEffect","userId","catch","finally","href","email","name","App","setTodos","selectedTodoId","setSelectedTodoId","input","setInput","setSelector","isLoading","setIsLoading","isError","setIsError","closeTodoModal","useCallback","handleSelectTodo","handleChangeQuery","word","handleChangeSelector","option","handleDeleteQueryText","selectedTodo","useMemo","find","filteredTodos","filter","toLowerCase","includes","visibleTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2563dd21.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[]\n  selectTodo: (id: number) => void,\n  selectTodoId: number,\n}\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos,\n  selectTodoId,\n  selectTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames('',\n                  { 'has-text-success': todo.completed },\n                  { 'has-text-danger': !todo.completed })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {selectTodoId === todo.id\n                ? (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button is-link\"\n                    type=\"button\"\n                    onClick={() => selectTodo(0)}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                ) : (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => selectTodo(todo.id)}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import React, { memo } from 'react';\n\ninterface Props {\n  query: string,\n  onSearchQueryChange: (word: string)=> void,\n  selector: string,\n  onSelectorChange: (option: string)=> void,\n  onDeleteButtonClick: () => void,\n}\n\nexport const TodoFilter: React.FC<Props> = memo(({\n  query,\n  onSearchQueryChange,\n  selector,\n  onSelectorChange,\n  onDeleteButtonClick,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={selector}\n          onChange={(event) => onSelectorChange(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => onSearchQueryChange(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={onDeleteButtonClick}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n));\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { memo } from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = memo(() => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n));\n","import React, { memo, useState, useEffect } from 'react';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo,\n  onClickCloseTodoModal: ()=> void\n}\n\nexport const TodoModal: React.FC<Props> = memo(({\n  todo,\n  onClickCloseTodoModal,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoading, setIsUserLoading] = useState(false);\n\n  useEffect(() => {\n    setIsUserLoading(true);\n\n    getUser(todo.userId)\n      .then(setUser)\n      .catch(() => setUser(null))\n      .finally(() => setIsUserLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isUserLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClickCloseTodoModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              {todo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, {\n  useEffect, useState, useMemo, useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [input, setInput] = useState('');\n  const [selector, setSelector] = useState('All');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const closeTodoModal = useCallback(() => {\n    setSelectedTodoId(0);\n  }, []);\n\n  const handleSelectTodo = useCallback((id:number) => {\n    setSelectedTodoId(id);\n  }, []);\n\n  const handleChangeQuery = useCallback((word: string) => {\n    setInput(word);\n  }, []);\n\n  const handleChangeSelector = useCallback((option: string) => {\n    setSelector(option);\n  }, []);\n\n  const handleDeleteQueryText = useCallback(() => {\n    setInput('');\n  }, []);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const selectedTodo = useMemo(() => todos.find(todo => todo.id === selectedTodoId), [selectedTodoId]);\n\n  const filteredTodos = todos.filter(todo => todo.title.toLowerCase().includes(input.toLowerCase()));\n\n  let visibleTodos = filteredTodos;\n\n  if (selector === 'active') {\n    visibleTodos = filteredTodos.filter(todo => !todo.completed);\n  }\n\n  if (selector === 'completed') {\n    visibleTodos = filteredTodos.filter(todo => todo.completed);\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={input}\n                onSearchQueryChange={handleChangeQuery}\n                selector={selector}\n                onSelectorChange={handleChangeSelector}\n                onDeleteButtonClick={handleDeleteQueryText}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              )\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectTodo={handleSelectTodo}\n                    selectTodoId={selectedTodoId}\n                  />\n                )}\n              {isError && (\n                <p>Something went wrong</p>\n              )}\n\n              {!visibleTodos.length && (\n                <p>No todos matched filters</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClickCloseTodoModal={closeTodoModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}